/* globals t: true */

var assert = require('chai').assert;
var gtrans = require('../index.js');
var fs = require('fs');

var data = fs.readFileSync('test/key.json', 'utf8');
var key = JSON.parse(data).api_key;

suite('gtrans', function() {
  setup(function() {
    t = new gtrans(key);
  });
  

  test('should error when not given an API key', function() {
    assert.throws(gtrans, /No API Key/);
  });

  suite('#translate', function() {
    test('should error when not given text', function() {
      var options = {
        source: "ja", 
        target: "en"
      };

      return t.translate(options).catch(function(err) {
        assert.match(err, /required property/);
      });
    });

    test('should error when not given target', function() {
      var options = {
        text: "hello, world",
        source: "en"
      };

      return t.translate(options).catch(function(err) {
        assert.match(err, /required property/);
      });
    });

    test('should translate text', function() {
      this.timeout(0); // Disable timeout.
      
      var options = {
        text: "hello, world",
        source: "en",
        target: "de"
      };

      var expected_translation = "Hallo Welt";

      return t.translate(options).then(function(data) {
        assert.isDefined(data);
        assert.equal(data[0].translatedText, expected_translation);
      });
    });

    test('should translate multiple strings', function() {
      this.timeout(0);

      var options = {
        text: [
          "hello, world",
          "the quick brown fox" ],
        source: "en",
        target: "de"
      };

      var expected_translations = ["Hallo Welt", "Der schnelle braune Fuchs"];

      return t.translate(options).then(function(data) {
        assert.isDefined(data);
        assert.equal(data[0].translatedText, expected_translations[0]);
        assert.equal(data[1].translatedText, expected_translations[1]);
      });
    });

    test('should detect languages for translation', function() {
      this.timeout(0);

      var options = {
        text: "hello, world",
        target: "de"
      };

      var expected_translation = "Hallo Welt";

      return t.translate(options).then(function(data) {
        assert.isDefined(data);
        assert.equal(data[0].translatedText, expected_translation);
      });
    });
  });

  suite('#detect', function() {
    test('should error when not given text to detect', function() {
      return t.detect().catch(function(err) {
        assert.match(err, /specify text/);
      });
    });

    test('should detect languages', function() {
      this.timeout(0);
      
      return t.detect("Hello, world!").then(function(data) {
        assert.isDefined(data);
        assert.equal(data[0][0].language, "en");
        assert.equal(data[0][0].isReliable, false);
      });
    });

    test('should detect multiple languages', function() {
      this.timeout(0);

      return t.detect("one", "two").then(function(data) {
        assert.isDefined(data);
        assert.equal(data[0][0].language, "en");
        assert.equal(data[1][0].language, "en");
      });
    });
  });
});