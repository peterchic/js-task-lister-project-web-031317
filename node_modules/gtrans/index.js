const https = require('https');
const qs = require('querystring');

const API_URL = "https://www.googleapis.com/language/translate/v2";

module.exports = gtrans;


/** Constructor for creating a gtrans object.
  * @constructor
  * @param {string} key - The Google Translate API Key.
  * @prop {string} key - The Google Translate API Key.
  */
function gtrans(key) {
  if(!key) {
    var err = new Error("No API Key specified in constructor.");
    throw err;
  }

  this.key = key;
  return;
}

/** Translate text.
  * @param {Object} options - Options for translation.
  * @param {string} options.text - The text to translate.
  * @param {string} options.source -  Source language. Optional, if not specified 
  *                                   this will be auto-detected by Google Translate.
  * @param {string} options.target - Target language.
  *
  * @returns {Promise} A promise that returns the API response if resolved, or an error if rejected.
  */
gtrans.prototype.translate = function(options) {
  var _this = this;
  var translationPromise = new Promise(function(resolve, reject) {
    var err;
    if(!options.text) {
      err = new Error("options.text is a required property.");
      reject(err);
      return;
    } else if(!options.target) {
      err = new Error("options.target is a required property.");
      reject(err);
      return;
    }

    var query_obj = {
      key: _this.key,
      q: options.text,
      target: options.target
    };

    if(options.source) {
      query_obj.source = options.source;
    }

    var request_query = "?" + qs.stringify(query_obj);

    var req = https.request(API_URL + request_query, function(res) {
      if(res.statusCode != 200) {
        reject(res.statusMessage);
      }
      res.setEncoding('utf8');
      res.on('data', function(data) {
        resolve(JSON.parse(data).data.translations);
      });
    });

    req.on('error', function(e) {
      reject(e);
    });

    req.end();
  });

  return translationPromise;
};

/** Detect text language.
  * @param {...string} text - The text to detect.
  * @returns {Promise} A promise that returns the API response if resolved, or an error if rejected.
  */
gtrans.prototype.detect = function(text) {
  var _this = this;
  var text_args = arguments;

  var detectPromise = new Promise(function(resolve, reject) {
    if(!text) {
      var err = new Error("Must specify text to detect.");
      reject(err);
      return;
    }

    // For whatever reason, arguments is an object with integer keys instead
    // of just being, you know, an array. This line converts this weird-ass
    // object shit into an array.
    var text_arr = [].slice.call(text_args);

    var query_obj = {
      key: _this.key,
      q: text_arr
    };

    var request_query = "?" + qs.stringify(query_obj);

    var req = https.request(API_URL + "/detect" + request_query, function(res) {
      if(res.statusCode != 200) {
        reject(res.statusMessage);
      }

      res.setEncoding('utf8');
      res.on('data', function(data) {
        resolve(JSON.parse(data).data.detections);
      });
    });

    req.on('error', function(e) {
      reject(e);
    });

    req.end();
  });

  return detectPromise;
};